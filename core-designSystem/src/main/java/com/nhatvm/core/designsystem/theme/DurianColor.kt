package com.nhatvm.core.designsystem.theme

import androidx.compose.runtime.Immutable
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.compose.ui.graphics.Color

@Immutable
data class DurianColor(
    val primary: Color,
    val onPrimary: Color,
    val primaryContainer: Color,
    val onPrimaryContainer: Color,
    val inversePrimary: Color,
    val secondary: Color,
    val onSecondary: Color,
    val secondaryContainer: Color,
    val onSecondaryContainer: Color,
    val tertiary: Color,
    val onTertiary: Color,
    val tertiaryContainer: Color,
    val onTertiaryContainer: Color,
    val background: Color,
    val onBackground: Color,
    val surface: Color,
    val onSurface: Color,
    val surfaceVariant: Color,
    val onSurfaceVariant: Color,
    val surfaceTint: Color,
    val inverseSurface: Color,
    val inverseOnSurface: Color,
    val error: Color,
    val onError: Color,
    val errorContainer: Color,
    val onErrorContainer: Color,
    val outline: Color,
    val outlineVariant: Color,
    val scrim: Color,
)

fun lightColor(
    primary : Color = light_primary,
    onPrimary: Color = light_onPrimary,
    primaryContainer : Color = light_primaryContainer,
    onPrimaryContainer: Color  = light_onPrimaryContainer,
    secondary: Color  = light_secondary,
    onSecondary: Color  = light_onSecondary,
    secondaryContainer : Color = light_secondaryContainer,
    onSecondaryContainer: Color  = light_onSecondaryContainer,
    tertiary: Color  = light_tertiary,
    onTertiary: Color  = light_onTertiary,
    tertiaryContainer: Color  = light_tertiaryContainer,
    onTertiaryContainer: Color  = light_onTertiaryContainer,
    error : Color = light_error,
    errorContainer : Color = light_errorContainer,
    onError: Color  = light_onError,
    onErrorContainer: Color  = light_onErrorContainer,
    background: Color  = light_background,
    onBackground : Color = light_onBackground,
    surface : Color = light_surface,
    onSurface: Color  = light_onSurface,
    surfaceVariant : Color = light_surfaceVariant,
    onSurfaceVariant : Color = light_onSurfaceVariant,
    outline: Color  = light_outline,
    inverseOnSurface : Color = light_inverseOnSurface,
    inverseSurface: Color  = light_inverseSurface,
    inversePrimary: Color  = light_inversePrimary,
    surfaceTint: Color  = light_surfaceTint,
    outlineVariant: Color  = light_outlineVariant,
    scrim : Color = light_scrim,
): DurianColor = DurianColor(
    primary = primary,
    onPrimary = onPrimary,
    primaryContainer = primaryContainer,
    onPrimaryContainer = onPrimaryContainer,
    inversePrimary = inversePrimary,
    secondary = secondary,
    onSecondary = onSecondary,
    secondaryContainer = secondaryContainer,
    onSecondaryContainer = onSecondaryContainer,
    tertiary = tertiary,
    onTertiary = onTertiary,
    tertiaryContainer = tertiaryContainer,
    onTertiaryContainer = onTertiaryContainer,
    background = background,
    onBackground = onBackground,
    surface = surface,
    onSurface = onSurface,
    surfaceVariant = surfaceVariant,
    onSurfaceVariant = onSurfaceVariant,
    surfaceTint = surfaceTint,
    inverseSurface = inverseSurface,
    inverseOnSurface = inverseOnSurface,
    error = error,
    onError = onError,
    errorContainer = errorContainer,
    onErrorContainer = onErrorContainer,
    outline = outline,
    outlineVariant = outlineVariant,
    scrim = scrim,
)

fun darkColor(
    primary : Color = dark_primary,
    onPrimary : Color = dark_onPrimary,
    primaryContainer : Color = dark_primaryContainer,
    onPrimaryContainer : Color = dark_onPrimaryContainer,
    secondary : Color = dark_secondary,
    onSecondary : Color = dark_onSecondary,
    secondaryContainer : Color = dark_secondaryContainer,
    onSecondaryContainer : Color = dark_onSecondaryContainer,
    tertiary : Color = dark_tertiary,
    onTertiary : Color = dark_onTertiary,
    tertiaryContainer : Color = dark_tertiaryContainer,
    onTertiaryContainer : Color = dark_onTertiaryContainer,
    error  : Color= dark_error,
    errorContainer : Color = dark_errorContainer,
    onError : Color = dark_onError,
    onErrorContainer  : Color= dark_onErrorContainer,
    background : Color = dark_background,
    onBackground  : Color= dark_onBackground,
    surface : Color = dark_surface,
    onSurface : Color = dark_onSurface,
    surfaceVariant : Color = dark_surfaceVariant,
    onSurfaceVariant : Color = dark_onSurfaceVariant,
    outline : Color = dark_outline,
    inverseOnSurface : Color = dark_inverseOnSurface,
    inverseSurface  : Color= dark_inverseSurface,
    inversePrimary : Color = dark_inversePrimary,
    surfaceTint : Color = dark_surfaceTint,
    outlineVariant  : Color= dark_outlineVariant,
    scrim : Color = dark_scrim,
): DurianColor = DurianColor(
    primary = primary,
    onPrimary = onPrimary,
    primaryContainer = primaryContainer,
    onPrimaryContainer = onPrimaryContainer,
    inversePrimary = inversePrimary,
    secondary = secondary,
    onSecondary = onSecondary,
    secondaryContainer = secondaryContainer,
    onSecondaryContainer = onSecondaryContainer,
    tertiary = tertiary,
    onTertiary = onTertiary,
    tertiaryContainer = tertiaryContainer,
    onTertiaryContainer = onTertiaryContainer,
    background = background,
    onBackground = onBackground,
    surface = surface,
    onSurface = onSurface,
    surfaceVariant = surfaceVariant,
    onSurfaceVariant = onSurfaceVariant,
    surfaceTint = surfaceTint,
    inverseSurface = inverseSurface,
    inverseOnSurface = inverseOnSurface,
    error = error,
    onError = onError,
    errorContainer = errorContainer,
    onErrorContainer = onErrorContainer,
    outline = outline,
    outlineVariant = outlineVariant,
    scrim = scrim,
)

val LocalColors = staticCompositionLocalOf { lightColor() }